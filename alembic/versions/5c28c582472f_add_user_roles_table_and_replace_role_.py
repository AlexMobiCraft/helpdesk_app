"""Add user_roles table and replace role with role_id in users table

Revision ID: 5c28c582472f
Revises: 9896214bcfff
Create Date: 2025-04-13 09:09:58.415154

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision: str = '5c28c582472f'
down_revision: Union[str, None] = '9896214bcfff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Создаем таблицу user_roles
    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_user_roles_name'))
    )
    op.create_index(op.f('ix_user_roles_id'), 'user_roles', ['id'], unique=False)
    
    # Исправление для devices, не связанное с нашей миграцией
    op.drop_index('ix_devices_inventory_number', table_name='devices')
    op.create_index(op.f('ix_devices_inventory_number'), 'devices', ['inventory_number'], unique=True)
    
    # 2. Заполняем таблицу ролей стандартными значениями
    user_roles_table = table('user_roles',
        column('id', sa.Integer),
        column('name', sa.String),
        column('description', sa.String)
    )
    
    op.bulk_insert(user_roles_table, [
        {'id': 1, 'name': 'admin', 'description': 'Администратор системы'},
        {'id': 2, 'name': 'technician', 'description': 'Технический специалист'},
        {'id': 3, 'name': 'user', 'description': 'Обычный пользователь'},
    ])

    # 3. Добавляем столбец role_id как NULL (временно)
    op.add_column('users', sa.Column('role_id', sa.Integer(), nullable=True, comment='Внешний ключ, ID роли пользователя'))
    
    # 4. Заполняем значения role_id на основе существующего столбца role
    connection = op.get_bind()
    connection.execute(sa.text("""
        UPDATE users 
        SET role_id = 1 
        WHERE role = 'admin'
    """))
    
    connection.execute(sa.text("""
        UPDATE users 
        SET role_id = 2 
        WHERE role = 'technician'
    """))
    
    connection.execute(sa.text("""
        UPDATE users 
        SET role_id = 3 
        WHERE role = 'user'
    """))
    
    # 5. Устанавливаем столбец role_id как NOT NULL
    op.alter_column('users', 'role_id', nullable=False)
    
    # 6. Удаляем старый индекс и создаем новый
    op.drop_index('ix_users_role', table_name='users')
    op.create_index(op.f('ix_users_role_id'), 'users', ['role_id'], unique=False)
    
    # 7. Создаем внешний ключ
    op.create_foreign_key(op.f('fk_users_role_id_user_roles'), 'users', 'user_roles', ['role_id'], ['id'])
    
    # 8. Удаляем старый столбец role
    op.drop_column('users', 'role')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Роль пользователя (admin, technician, user)'))
    
    # Заполняем значения role на основе role_id
    connection = op.get_bind()
    connection.execute(sa.text("""
        UPDATE users 
        SET role = 'admin' 
        WHERE role_id = 1
    """))
    
    connection.execute(sa.text("""
        UPDATE users 
        SET role = 'technician' 
        WHERE role_id = 2
    """))
    
    connection.execute(sa.text("""
        UPDATE users 
        SET role = 'user' 
        WHERE role_id = 3
    """))
    
    # Устанавливаем столбец role как NOT NULL
    op.alter_column('users', 'role', nullable=False)
    
    op.drop_constraint(op.f('fk_users_role_id_user_roles'), 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_role_id'), table_name='users')
    op.create_index('ix_users_role', 'users', ['role'], unique=False)
    op.drop_column('users', 'role_id')
    op.drop_index(op.f('ix_devices_inventory_number'), table_name='devices')
    op.create_index('ix_devices_inventory_number', 'devices', ['inventory_number'], unique=False)
    op.drop_index(op.f('ix_user_roles_id'), table_name='user_roles')
    op.drop_table('user_roles')
    # ### end Alembic commands ###
